// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HttpClient is an autogenerated mock type for the HttpClient type
type HttpClient struct {
	mock.Mock
}

// Call provides a mock function with given fields: req, response
func (_m *HttpClient) Call(req *http.Request, response interface{}) (int, string, error) {
	ret := _m.Called(req, response)

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) (int, string, error)); ok {
		return rf(req, response)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) int); ok {
		r0 = rf(req, response)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*http.Request, interface{}) string); ok {
		r1 = rf(req, response)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*http.Request, interface{}) error); ok {
		r2 = rf(req, response)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CallWithLog provides a mock function with given fields: ctx, req, response
func (_m *HttpClient) CallWithLog(ctx context.Context, req *http.Request, response interface{}) (int, string, error) {
	ret := _m.Called(ctx, req, response)

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request, interface{}) (int, string, error)); ok {
		return rf(ctx, req, response)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request, interface{}) int); ok {
		r0 = rf(ctx, req, response)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request, interface{}) string); ok {
		r1 = rf(ctx, req, response)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *http.Request, interface{}) error); ok {
		r2 = rf(ctx, req, response)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewHttpClient creates a new instance of HttpClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpClient {
	mock := &HttpClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
