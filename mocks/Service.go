// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/seigaalghi/e-library/model"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetBooks provides a mock function with given fields: ctx, req
func (_m *Service) GetBooks(ctx context.Context, req *model.GetBooksRequest) (*model.GetBooksResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.GetBooksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetBooksRequest) (*model.GetBooksResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetBooksRequest) *model.GetBooksResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetBooksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetBooksRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LendBook provides a mock function with given fields: ctx, req
func (_m *Service) LendBook(ctx context.Context, req *model.LendBookRequest) (*model.LendBookResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.LendBookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LendBookRequest) (*model.LendBookResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LendBookRequest) *model.LendBookResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LendBookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LendBookRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, req
func (_m *Service) Login(ctx context.Context, req *model.LoginRequest) (*model.LoginResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginRequest) (*model.LoginResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LoginRequest) *model.LoginResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
